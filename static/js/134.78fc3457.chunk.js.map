{"version":3,"file":"static/js/134.78fc3457.chunk.js","mappings":"+JAEe,SAASA,IACtB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,WAAY,oBAAqBC,WAAY,MAAOC,QAAS,OAAQC,SAAU,QAASC,OAAQ,QAASC,SAAA,EACrHC,EAAAA,EAAAA,KAAA,MAAIP,MAAO,CAAEQ,MAAO,WAAYF,SAAC,mBAEjCP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kPAMLP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uCACHC,EAAAA,EAAAA,KAAA,OAAKP,MAAO,CAAEU,WAAY,UAAWP,QAAS,OAAQQ,aAAc,OAAQL,SAAA,ugBAwB9EP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJP,EAAAA,EAAAA,MAAA,MAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kEACJP,EAAAA,EAAAA,MAAA,MAAAO,SAAA,CAAI,sCAAkCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gCAA8C,2BAI9FP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAEY,UAAW,QAASN,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4MAOX,C","sources":["pages/11-portals/PortalsComponent.tsx"],"sourcesContent":["import React from 'react'\n\nexport default function PortalsComponent() {\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', lineHeight: '1.6', padding: '20px', maxWidth: '800px', margin: 'auto' }}>\n      <h1 style={{ color: '#4A90E2' }}>React Portals</h1>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>What are Portals?</h2>\n        <p>\n          React Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n          This is useful for modals, tooltips, or any element that should visually break out of its parent container.\n        </p>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>Basic Example</h2>\n        <p>Rendering a modal using a portal:</p>\n        <pre style={{ background: '#f5f5f5', padding: '10px', borderRadius: '5px' }}>\n{`import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Modal({ children }) {\n  return ReactDOM.createPortal(\n    <div style={{\n      position: 'fixed',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      background: '#fff',\n      padding: '20px',\n      boxShadow: '0 4px 12px rgba(0,0,0,0.3)',\n      borderRadius: '8px'\n    }}>\n      {children}\n    </div>,\n    document.getElementById('modal-root') // DOM node outside parent hierarchy\n  );\n}`}\n        </pre>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>Key Points</h2>\n        <ul>\n          <li>Portals allow rendering outside the parent component's DOM hierarchy.</li>\n          <li>They preserve Reactâ€™s event bubbling behavior.</li>\n          <li>Commonly used for modals, tooltips, dropdowns, and overlays.</li>\n          <li>Requires a target DOM node, e.g., <code>&lt;div id=\"modal-root\"&gt;&lt;/div&gt;</code> in your HTML.</li>\n        </ul>\n      </section>\n\n      <section style={{ marginTop: '20px' }}>\n        <h2>Summary</h2>\n        <p>\n          React Portals provide flexibility in rendering UI elements outside the normal DOM tree, \n          making them essential for components like modals or floating tooltips without breaking layout constraints.\n        </p>\n      </section>\n    </div>\n  );\n}\n"],"names":["PortalsComponent","_jsxs","style","fontFamily","lineHeight","padding","maxWidth","margin","children","_jsx","color","marginBottom","background","borderRadius","marginTop"],"sourceRoot":""}