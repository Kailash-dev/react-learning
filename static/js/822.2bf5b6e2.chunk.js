"use strict";(self.webpackChunkreact_learning=self.webpackChunkreact_learning||[]).push([[822],{822:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var a=t(579);function i(){return(0,a.jsxs)("div",{style:{fontFamily:"Arial, sans-serif",lineHeight:"1.6",padding:"20px",maxWidth:"800px",margin:"auto"},children:[(0,a.jsx)("h1",{style:{color:"#4A90E2"},children:"Lifting State Up"}),(0,a.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,a.jsx)("h2",{children:"What is Lifting State Up?"}),(0,a.jsx)("p",{children:'"Lifting State Up" is a React pattern where state is moved to the closest common ancestor of components that need it. This allows multiple components to share and synchronize state.'})]}),(0,a.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,a.jsx)("h2",{children:"Example Scenario"}),(0,a.jsx)("p",{children:"Two input components need to display the same temperature in Celsius and Fahrenheit:"}),(0,a.jsx)("pre",{style:{background:"#f5f5f5",padding:"10px",borderRadius:"5px"},children:'function TemperatureInput({ label, value, onChange }) {\n  return (\n    <div>\n      <label>{label}: </label>\n      <input value={value} onChange={e => onChange(e.target.value)} />\n    </div>\n  );\n}\n\nfunction Calculator() {\n  const [temperature, setTemperature] = useState(\'\');\n\n  const handleTemperatureChange = (value) => setTemperature(value);\n\n  return (\n    <div>\n      <TemperatureInput label="Celsius" value={temperature} onChange={handleTemperatureChange} />\n      <TemperatureInput label="Fahrenheit" value={temperature && (temperature * 9/5 + 32).toFixed(2)} onChange={handleTemperatureChange} />\n    </div>\n  );\n}'})]}),(0,a.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,a.jsx)("h2",{children:"Key Points"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"State is lifted to the closest common ancestor to share it between child components."}),(0,a.jsx)("li",{children:"Child components receive the state via props."}),(0,a.jsx)("li",{children:"State updates in the parent propagate to all children that depend on it."}),(0,a.jsx)("li",{children:"This pattern avoids duplication of state and ensures consistency."})]})]}),(0,a.jsxs)("section",{style:{marginTop:"20px"},children:[(0,a.jsx)("h2",{children:"Summary"}),(0,a.jsx)("p",{children:"Lifting state up is an essential React pattern for sharing data between components. By keeping the source of truth in a parent component, multiple children can stay synchronized."})]})]})}}}]);
//# sourceMappingURL=822.2bf5b6e2.chunk.js.map