"use strict";(self.webpackChunkreact_learning=self.webpackChunkreact_learning||[]).push([[903],{903:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});t(43);var s=t(579);function a(){return(0,s.jsxs)("div",{style:{fontFamily:"Arial, sans-serif",lineHeight:"1.6",padding:"20px",maxWidth:"800px",margin:"auto"},children:[(0,s.jsx)("h1",{style:{color:"#4A90E2"},children:"React State Hook (useState)"}),(0,s.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,s.jsx)("h2",{children:"What is useState?"}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"useState"})," is a Hook that lets you add state to functional components. Previously, only class components could have state. Now, functional components can manage state as well."]})]}),(0,s.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,s.jsx)("h2",{children:"Basic Example"}),(0,s.jsxs)("p",{children:["Example of using ",(0,s.jsx)("code",{children:"useState"})," to manage a counter:"]}),(0,s.jsx)("pre",{style:{background:"#f5f5f5",padding:"10px",borderRadius:"5px"},children:"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}"})]}),(0,s.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,s.jsx)("h2",{children:"Key Points"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"useState"})," returns an array with two elements: the current state and a setter function."]}),(0,s.jsx)("li",{children:"State can be any type: number, string, object, array, etc."}),(0,s.jsx)("li",{children:"Calling the setter function re-renders the component with the new state."}),(0,s.jsxs)("li",{children:["Multiple ",(0,s.jsx)("code",{children:"useState"})," calls can be used to manage multiple independent state variables."]})]})]}),(0,s.jsxs)("section",{style:{marginTop:"20px"},children:[(0,s.jsx)("h2",{children:"Example with Multiple State Variables"}),(0,s.jsx)("pre",{style:{background:"#f5f5f5",padding:"10px",borderRadius:"5px"},children:"function UserForm() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n\n  return (\n    <div>\n      <input value={name} onChange={e => setName(e.target.value)} placeholder=\"Name\" />\n      <input value={age} onChange={e => setAge(e.target.value)} placeholder=\"Age\" />\n      <p>{name} is {age} years old.</p>\n    </div>\n  );\n}"})]}),(0,s.jsxs)("section",{style:{marginTop:"20px"},children:[(0,s.jsx)("h2",{children:"Summary"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("strong",{children:"useState"})," Hook is fundamental in React functional components. It allows you to manage and update state without using class components, making your code simpler and easier to read."]})]})]})}}}]);
//# sourceMappingURL=903.cc311387.chunk.js.map