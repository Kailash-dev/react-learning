{"version":3,"file":"static/js/151.0c0a51ce.chunk.js","mappings":"yJACe,SAASA,IAItB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,WAAY,oBAAqBC,WAAY,MAAOC,QAAS,OAAQC,SAAU,QAASC,OAAQ,QAASC,SAAA,EACrHC,EAAAA,EAAAA,KAAA,MAAIP,MAAO,CAAEQ,MAAO,WAAYF,SAAC,uBAEjCP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sJAKLP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,qEAE7BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cACHC,EAAAA,EAAAA,KAAA,OAAKP,MAAO,CAAEU,WAAY,UAAWP,QAAS,OAAQQ,aAAc,OAAQL,SAAA,uFAO9EP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,kFAE1BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cACHC,EAAAA,EAAAA,KAAA,OAAKP,MAAO,CAAEU,WAAY,UAAWP,QAAS,OAAQQ,aAAc,OAAQL,SAAA,mFAK9EP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,wEAE9BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cACHC,EAAAA,EAAAA,KAAA,OAAKP,MAAO,CAAEU,WAAY,UAAWP,QAAS,OAAQQ,aAAc,OAAQL,SAAA,0FAO9EP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAEY,UAAW,QAASN,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,CAAG,+FAEGC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eAAiB,qBAAiBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAAc,qCAAiCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAkB,0BAKnI,C","sources":["pages/12-memoization/MemorizationComponent.tsx"],"sourcesContent":["\nexport default function MemorizationComponent() {\n  // useMemo to memoize expensive calculation\n\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', lineHeight: '1.6', padding: '20px', maxWidth: '800px', margin: 'auto' }}>\n      <h1 style={{ color: '#4A90E2' }}>React Memoization</h1>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>What is Memoization?</h2>\n        <p>\n          Memoization in React is a performance optimization technique. It prevents unnecessary re-rendering of components or re-computation of values.\n        </p>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>React.memo</h2>\n        <p>\n          <strong>React.memo</strong> wraps a component and only re-renders it if its props change.\n        </p>\n        <p>Example:</p>\n        <pre style={{ background: '#f5f5f5', padding: '10px', borderRadius: '5px' }}>\n{`const MyComponent = React.memo(({ value }) => {\n  return <p>{value}</p>;\n});`}\n        </pre>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>useMemo</h2>\n        <p>\n          <strong>useMemo</strong> memoizes a computed value and recomputes it only when dependencies change.\n        </p>\n        <p>Example:</p>\n        <pre style={{ background: '#f5f5f5', padding: '10px', borderRadius: '5px' }}>\n{`const memoizedValue = useMemo(() => expensiveComputation(count), [count]);`}\n        </pre>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>useCallback</h2>\n        <p>\n          <strong>useCallback</strong> memoizes a function so that it is not recreated on every render.\n        </p>\n        <p>Example:</p>\n        <pre style={{ background: '#f5f5f5', padding: '10px', borderRadius: '5px' }}>\n{`const memoizedCallback = useCallback(() => {\n  doSomething(count);\n}, [count]);`}\n        </pre>\n      </section>\n\n      <section style={{ marginTop: '20px' }}>\n        <h2>Summary</h2>\n        <p>\n          Memoization improves performance by avoiding unnecessary re-renders or recalculations.\n          Use <code>React.memo</code> for components, <code>useMemo</code> for expensive computations, and <code>useCallback</code> for functions.\n        </p>\n      </section>\n    </div>\n  );\n}\n"],"names":["MemorizationComponent","_jsxs","style","fontFamily","lineHeight","padding","maxWidth","margin","children","_jsx","color","marginBottom","background","borderRadius","marginTop"],"sourceRoot":""}