{"version":3,"file":"static/js/449.a1f692b4.chunk.js","mappings":"iKAEe,SAASA,IACvB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAwB,OACxCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,OAC3CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAyBvC,OAvBAK,EAAAA,EAAAA,WAAU,KACUC,WAChBF,GAAW,GACX,IAEE,MAAMG,QAAiB,IAAIC,QAAgB,CAACC,EAASC,KACnDC,WAAW,KACTC,KAAKC,SAAW,GAAMJ,EAAQ,8BAAgCC,EAAO,0BACpE,OAELX,EAAQQ,GACRL,EAAS,KACX,CAAE,MAAOY,GACPZ,EAASY,GACTf,EAAQ,KACV,CAAC,QACCK,GAAW,EACb,GAGFW,IACC,KAGDC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,WAAY,oBAAqBC,WAAY,MAAOC,QAAS,OAAQC,SAAU,QAASC,OAAQ,QAASC,SAAA,EACrHC,EAAAA,EAAAA,KAAA,MAAIP,MAAO,CAAEQ,MAAO,WAAYF,SAAC,6BAEjCP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iCACJP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,CAAG,eACUC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,cAAgB,8HAIrCP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,OAAKP,MAAO,CAAEU,WAAY,UAAWP,QAAS,OAAQQ,aAAc,OAAQL,SAAA,qQAe9EP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAES,aAAc,QAASH,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJP,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEY,UAAW,OAAQT,QAAS,OAAQU,gBAAiB,UAAWF,aAAc,OAAQL,SAAA,CACjGpB,IAAWqB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACdtB,IAASe,EAAAA,EAAAA,MAAA,KAAGC,MAAO,CAAEQ,MAAO,OAAQF,SAAA,CAAC,UAAQtB,KAC7CH,IAAQ0B,EAAAA,EAAAA,KAAA,KAAGP,MAAO,CAAEQ,MAAO,SAAUF,SAAEzB,WAI5CkB,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAEY,UAAW,QAASN,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJP,EAAAA,EAAAA,MAAA,MAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFACJP,EAAAA,EAAAA,MAAA,MAAAO,SAAA,CAAI,QAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,cAAgB,sCAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wEAIRP,EAAAA,EAAAA,MAAA,WAASC,MAAO,CAAEY,UAAW,QAASN,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2LAOX,C","sources":["pages/23-error-handling-hooks/ErrorHandlingComponent.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nexport default function ErrorHandlingComponent() {\n const [data, setData] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Simulating API call\n        const response = await new Promise<string>((resolve, reject) => {\n          setTimeout(() => {\n            Math.random() > 0.5 ? resolve('Fetched data successfully!') : reject('Failed to fetch data.');\n          }, 1000);\n        });\n        setData(response);\n        setError(null);\n      } catch (err) {\n        setError(err as string);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', lineHeight: '1.6', padding: '20px', maxWidth: '800px', margin: 'auto' }}>\n      <h1 style={{ color: '#4A90E2' }}>Error Handling in Hooks</h1>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>Why Handle Errors in Hooks?</h2>\n        <p>\n          Hooks like <code>useEffect</code> often involve async operations like API calls. Proper error handling ensures the UI can gracefully handle failures.\n        </p>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>Example</h2>\n        <pre style={{ background: '#f5f5f5', padding: '10px', borderRadius: '5px' }}>\n{`useEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data');\n      setData(await response.json());\n    } catch (err) {\n      setError('Failed to fetch data');\n    }\n  };\n  fetchData();\n}, []);`}\n        </pre>\n      </section>\n\n      <section style={{ marginBottom: '20px' }}>\n        <h2>Try it Out</h2>\n        <div style={{ marginTop: '10px', padding: '15px', backgroundColor: '#f3f3f3', borderRadius: '6px' }}>\n          {loading && <p>Loading...</p>}\n          {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n          {data && <p style={{ color: 'green' }}>{data}</p>}\n        </div>\n      </section>\n\n      <section style={{ marginTop: '20px' }}>\n        <h2>Key Points</h2>\n        <ul>\n          <li>Always handle errors in async hooks to prevent unhandled promise rejections.</li>\n          <li>Use <code>try/catch</code> blocks inside async functions.</li>\n          <li>Provide meaningful feedback to users when errors occur.</li>\n          <li>Reset state properly to avoid stale data or inconsistent UI.</li>\n        </ul>\n      </section>\n\n      <section style={{ marginTop: '20px' }}>\n        <h2>Summary</h2>\n        <p>\n          Proper error handling in hooks is essential for building robust React applications. \n          Always anticipate failures and update state to reflect loading, success, or error conditions.\n        </p>\n      </section>\n    </div>\n  );\n}\n"],"names":["ErrorHandlingComponent","data","setData","useState","error","setError","loading","setLoading","useEffect","async","response","Promise","resolve","reject","setTimeout","Math","random","err","fetchData","_jsxs","style","fontFamily","lineHeight","padding","maxWidth","margin","children","_jsx","color","marginBottom","background","borderRadius","marginTop","backgroundColor"],"sourceRoot":""}