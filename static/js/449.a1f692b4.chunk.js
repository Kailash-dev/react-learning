"use strict";(self.webpackChunkreact_learning=self.webpackChunkreact_learning||[]).push([[449],{449:(e,s,n)=>{n.r(s),n.d(s,{default:()=>i});var r=n(43),t=n(579);function i(){const[e,s]=(0,r.useState)(null),[n,i]=(0,r.useState)(null),[a,l]=(0,r.useState)(!1);return(0,r.useEffect)(()=>{(async()=>{l(!0);try{const e=await new Promise((e,s)=>{setTimeout(()=>{Math.random()>.5?e("Fetched data successfully!"):s("Failed to fetch data.")},1e3)});s(e),i(null)}catch(e){i(e),s(null)}finally{l(!1)}})()},[]),(0,t.jsxs)("div",{style:{fontFamily:"Arial, sans-serif",lineHeight:"1.6",padding:"20px",maxWidth:"800px",margin:"auto"},children:[(0,t.jsx)("h1",{style:{color:"#4A90E2"},children:"Error Handling in Hooks"}),(0,t.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,t.jsx)("h2",{children:"Why Handle Errors in Hooks?"}),(0,t.jsxs)("p",{children:["Hooks like ",(0,t.jsx)("code",{children:"useEffect"})," often involve async operations like API calls. Proper error handling ensures the UI can gracefully handle failures."]})]}),(0,t.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,t.jsx)("h2",{children:"Example"}),(0,t.jsx)("pre",{style:{background:"#f5f5f5",padding:"10px",borderRadius:"5px"},children:"useEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data');\n      setData(await response.json());\n    } catch (err) {\n      setError('Failed to fetch data');\n    }\n  };\n  fetchData();\n}, []);"})]}),(0,t.jsxs)("section",{style:{marginBottom:"20px"},children:[(0,t.jsx)("h2",{children:"Try it Out"}),(0,t.jsxs)("div",{style:{marginTop:"10px",padding:"15px",backgroundColor:"#f3f3f3",borderRadius:"6px"},children:[a&&(0,t.jsx)("p",{children:"Loading..."}),n&&(0,t.jsxs)("p",{style:{color:"red"},children:["Error: ",n]}),e&&(0,t.jsx)("p",{style:{color:"green"},children:e})]})]}),(0,t.jsxs)("section",{style:{marginTop:"20px"},children:[(0,t.jsx)("h2",{children:"Key Points"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Always handle errors in async hooks to prevent unhandled promise rejections."}),(0,t.jsxs)("li",{children:["Use ",(0,t.jsx)("code",{children:"try/catch"})," blocks inside async functions."]}),(0,t.jsx)("li",{children:"Provide meaningful feedback to users when errors occur."}),(0,t.jsx)("li",{children:"Reset state properly to avoid stale data or inconsistent UI."})]})]}),(0,t.jsxs)("section",{style:{marginTop:"20px"},children:[(0,t.jsx)("h2",{children:"Summary"}),(0,t.jsx)("p",{children:"Proper error handling in hooks is essential for building robust React applications. Always anticipate failures and update state to reflect loading, success, or error conditions."})]})]})}}}]);
//# sourceMappingURL=449.a1f692b4.chunk.js.map